Document Object Model (DOM)
The Document Object Model (DOM) is a programming interface for HTML and XML documents. It represents the page so that programs can
change the document structure, style, and content. The DOM represents the document as nodes and objects. That way, programming languages
can connect to the page.

HTML DOM API
The HTML DOM API is made up of the interfaces that define the functionality of each of the elements in HTML, as well as any supporting
types and interfaces they rely upon.

The functional areas included in the HTML DOM API include:
Access to and control of HTML elements via the DOM.
Access to and manipulation of form data.
Interacting with the contents of 2D images and the context of an HTML <canvas>, for example to draw on top of them.
Management of media connected to the HTML media elements (<audio> and <video>).
Dragging and dropping of content on webpages.
Access to the browser navigation history
Supporting and connective interfaces for other APIs such as Web Components, Web Storage, Web Workers, WebSocket, and Server-sent events.

getElementsByClassName/getElementsByTagName returns HTMLCollection not Array
querySelectorAll() returns NodeList

Bubbling and capturing
DOM Event propagation:
Capturing phase – the event goes down to the element.
Target phase – the event reached the target element.
Bubbling phase – the event bubbles up from the element.

When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.
events "bubble" from the inner element up through parents (focus event does not bubble)
event.stopPropagation() stop the bubbling (to stop all use event.stopImmediatePropagation())

Capturing
The event moves down from the document root to event.target, calling handlers assigned with addEventListener(..., true) on
the way (true is a shorthand for {capture: true}).


------------------------------------------

LocalStorage vs sessionStorage
the data survives a page refresh (for sessionStorage) and even a full browser restart (for localStorage).

- The data is saved locally only and can't be read by the server, which eliminates the security issue that cookies present.
- It allows for much more data to be saved (10Mb for most browsers).
- The storage is bound to the origin (domain/protocol/port triplet). That is, different protocols or sub-domains
	infer different storage objects, they can't access data from each other.

Both the storage objects provide same methods and properties:
	setItem(key, value) – store item as key/value pair.
	getItem(key) – get item's value by key.
	removeItem(key) – remove item using key.
	clear() – clear or delete everything.
	key(index) – get the Item key based on index.
	length – returns total number of stored items.
	
localStorage
Main features:
	Data is shared between all tabs and windows from the same origin.
	The data will not expire. It will remain even after browser restart and survive OS reboot too.
	
sessionStorage
it's functionality is much more limited:
	The sessionStorage exists only within the current browser tab. Another tab with the same page will have a different session storage.
	However it is shared between iframes in the same tab (assuming they come from the same origin).
	The data survives page refresh, but not closing/opening the tab.
	
Storage Event
Storage event triggers(with properties), whenever there is any updates in the data in localStorage or sessionStorage.
key / oldValue / newValue / URL / storageArea (where the update happened
The important thing to note is: the event triggers on all -window- objects where the storage is accessible, except the one that caused it.

Web storage objects localStorage and sessionStorage allows us to store key/value in the browser.
	Both key and value must be strings.
	The limit is 2mb+, it depends on the browser.
	They do not expire.
	The data is bound to the origin (domain/port/protocol).
	
	
-------------------------------------------------------------

HTTP cookies
An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user's web browser.
The browser may store it and send it back with later requests to the same server. Typically, it's used to tell if two
requests came from the same browser — keeping a user logged-in, for example.

Cookies are mainly used for three purposes:
- Session management
	Logins, shopping carts, game scores, or anything else the server should remember
- Personalization
	User preferences, themes, and other settings
- Tracking
	Recording and analyzing user behavior
	
Creating cookies
After receiving an HTTP request, a server can send one or more Set-Cookie headers with the response.
The cookie is usually stored by the browser, and then the cookie is sent with requests made to the same server inside a Cookie HTTP header.

The Set-Cookie HTTP response header sends cookies from the server to the user agent. Eg.: Set-Cookie: <cookie-name>=<cookie-value>

The lifetime of a cookie can be defined in two ways:
	- Session cookies are deleted when the current session ends. The browser defines when the "current session" ends,
		and some browsers use session restoring when restarting, which can cause session cookies to last indefinitely long.
	- Permanent cookies are deleted at a date specified by the Expires attribute, or after a period of time specified by the Max-Age attribute.

The Domain and Path attributes define the scope of the cookie: what URLs the cookies should be sent to.

Domain attribute
The Domain attribute specifies which hosts are allowed to receive the cookie. If unspecified, it defaults to the same host that set the cookie,
excluding subdomains. If Domain is specified, then subdomains are always included. Therefore, specifying Domain is less restrictive than omitting it.
However, it can be helpful when subdomains need to share information about a user.
For example, if Domain=mozilla.org is set, then cookies are available on subdomains like developer.mozilla.org.

Path attribute
The Path attribute indicates a URL path that must exist in the requested URL in order to send the Cookie header.
The %x2F ("/") character is considered a directory separator, and subdirectories match as well.

SameSite attribute
The SameSite attribute lets servers specify whether/when cookies are sent with cross-origin requests (where Site is defined by
the registrable domain), which provides some protection against cross-site request forgery attacks (CSRF).

It takes three possible values: Strict, Lax, and None.
	- With Strict, the cookie is sent only to the same site as the one that originated it;
	- Lax is similar, except that cookies are sent when the user navigates to the cookie's origin site,
	eg by following a link from an external site;
	- None specifies that cookies are sent on both originating and cross-site requests, but only in secure contexts
	(i.e. if SameSite=None then the Secure attribute must also be set). If no SameSite attribute is set then the cookie is treated as Lax.
	
A cookie with the Secure attribute is sent to the server only with an encrypted request over the HTTPS protocol.
it can be read and modified by someone with access to the client's hard disk (or JavaScript if the HttpOnly attribute is not set)

A cookie with the HttpOnly attribute is inaccessible to the JavaScript Document.cookie API; it is sent only to the server.
This precaution helps mitigate cross-site scripting (XSS) attacks.

Cookie prefixes
__Host-
	If a cookie name has this prefix, it is accepted in a Set-Cookie header only if it is also marked with the Secure attribute,
	was sent from a secure origin, does not include a Domain attribute, and has the Path attribute set to /. In this way,
	these cookies can be seen as "domain-locked".

__Secure-
	If a cookie name has this prefix, it is accepted in a Set-Cookie header only if it is marked with the Secure attribute and
	was sent from a secure origin. This is weaker than the __Host- prefix.
	
Cookie-related regulations
Legislation or regulations that cover the use of cookies include:
	- The General Data Privacy Regulation (GDPR) in the European Union
	- The ePrivacy Directive in the EU
	- The California Consumer Privacy Act

These regulations have global reach, because they apply to any site on the World Wide Web that is accessed by users from
these jurisdictions (the EU and California, with the caveat that California's law applies only to entities with gross revenue over 25 million USD,
among other things.)

These regulations include requirements such as:
	- Notifying users that your site uses cookies.
	- Allowing users to opt out of receiving some or all cookies.
	- Allowing users to use the bulk of your service without receiving cookies.
	
Man-in-the-middle attacks
https://www.youtube.com/watch?v=8OR2dDIaIDw
A man-in-the-middle (MitM) attack describes a broad category of attacks where an attacker sits between a client and a server and
intercepts the data going between the two.
As a developer, you can greatly reduce the chance of a MitM attack by ensuring that you enable HTTPS on your server,
use an SSL certificate from a trusted certificate authority, and ensure your code uses HTTPS instead of the insecure HTTP.
In terms of cookies, you should add the Secure attribute to your cookies so they can only be sent over a secure HTTPS connection

XSS attacks
https://www.youtube.com/watch?v=EoaDgUgS6QA
An XSS (cross-site scripting) attack describes a category of attacks when a bad actor injects unintended, potentially dangerous code into a website.
These attacks are very problematic because they could affect every person that visits the site.
In terms of cookies, if a bad actor pulls off a successful XSS attack on a site, they could gain access to session cookies and
access the site as another signed in user.
As a developer, you'll want to ensure that your server enforces the Same Origin Policy, and that any
input you receive from people is properly sanitized.


------------------------------------------------------------------

Web Workers
Web Workers are a simple means for web content to run scripts in background threads. The worker thread can perform tasks
without interfering with the user interface. In addition, they can perform I/O using XMLHttpRequest (although the responseXML and
channel attributes are always null) or fetch (with no such restrictions). Once created, a worker can send messages to the
JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa).

Web Workers introduce the possibility of parallel execution inside the browser.
limitations:
- no access to the DOM: the Window object and the Document object
- they can communicate back with the main JavaScript program using messaging
- they need to be loaded from the same origin (domain, port and protocol)
- they don’t work if you serve the page using the file protocol (file://)
The global scope of a Web Worker, instead of Window which is in the main thread, is a WorkerGlobalScope object.

Web Workers API
Web Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application.
The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread
to run without being blocked/slowed down.

There are two main ways to communicate to a Web Worker:
the postMessage API offered by the Web Worker object
the Channel Messaging API

Lifecycle
Web Workers are launched and if they do not stay in listening mode for messages through worker.onmessage or by adding an event listener,
they will be shut down as soon as their code is run through completion.
A Web Worker can be stopped using its terminate() method from the main thread, and inside the worker itself using the global method close()

Worker types
- Dedicated workers are workers that are utilized by a single script. This context is represented by either a DedicatedWorkerGlobalScope object.

- Shared workers are workers that can be utilized by multiple scripts running in different windows, IFrames, etc.,
	as long as they are in the same domain as the worker. They are a little more complex than dedicated workers — scripts must communicate via an active port.

- Service Workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available).
	They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests and take
	appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to
	push notifications and background sync APIs.

- Chrome Workers are a Firefox-only type of worker that you can use if you are developing add-ons and want to use workers in extensions and
	have access to js-ctypes in your worker. See ChromeWorker for more details.
	
Supported Web APIs
Barcode Detection API, CustomEvent, Fetch API, FileReader, Network Information API, Performance API, Promise,
URL API (e.g. URL), WebGL with OffscreenCanvas,  WebSocket, XMLHttpRequest.


-------------------------------------------------------------

Offline web applications
Users of typical online Web applications are only able to use the applications while they have a connection to the Internet.
The HTML 5 specification provides two solutions to this: a SQL-based database API for storing data locally,
and an offline application HTTP cache for ensuring applications are available even when the user is not connected to their network.

SQL
The client-side SQL database in HTML 5 enables structured data storage.
The API to interact with this database is asynchronous which ensures that the user interface doesn't lock up.

Offline Application Caching APIs
The attribute takes a URI to a manifest, which specifies which files are to be cached. provides a way for scripts to add and remove
entries from the cache dynamically, and a way for applications to atomically update their cache to new files, optionally presenting
custom UI during the update.

-----------------------------------------------------------------

 Geolocation API
 allows the user to provide their location to web applications if they so desire. For privacy reasons,
 the user is asked for permission to report location information.
 
----------------------------------------------------------------


Promise
The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with
an asynchronous action's eventual success value or failure reason.

A Promise is in one of these states:
pending: initial state, neither fulfilled nor rejected.
fulfilled: meaning that the operation was completed successfully.
rejected: meaning that the operation failed.
resolved/settled: got the result (fulfilled or rejected)

The methods promise.then(), promise.catch(), and promise.finally() are used to associate further action with a promise that becomes resolved.
The .then() method takes up to two arguments; the first argument is a callback function for the resolved case of the promise,
and the second argument is a callback function for the rejected case.

Do error handling until a final .catch() statement. A .catch() is really just a .then() without a slot for a callback function
for the case when the promise is resolved.

.finally() - Appends a handler to the promise, and returns a new promise that is resolved when the original promise is resolved.
The handler is called when the promise is settled, whether fulfilled or rejected.

Static methods
Promise.all(iterable) - Wait for all promises to be resolved, or for any to be rejected.
Promise.any(iterable) - Takes an iterable of Promise objects and, as soon as one of the promises in the iterable fulfills,
	returns a single promise that resolves with the value from that promise.
Promise.race(iterable) - Wait until any of the promises is resolved or rejected.
Promise.reject(reason) - Returns a new Promise object that is rejected with the given reason.
Promise.resolve(value) - Returns a new Promise object that is resolved with the given value.

--------------------------------------------

Web History API
Provides easy methods to access the windows.history object. The window.history object contains the URLs (Web Sites) visited by the user.
Properties
length - Returns the number of URLs in the history list
scrollRestoration - explicitly set default scroll restoration behavior on history navigation. This property can be either auto or manual.
state - Returns an any value representing the state at the top of the history stack.

Methods
back() - This asynchronous method goes to the previous page in session history. Back button and equivalent to history.go(-1).
forward() - This asynchronous method goes to the next page in session history, Forward button and equivalent to history.go(1).
go() - Asynchronously loads a page from the session history, identified by its relative location to the current page.
pushState() - Pushes the given data onto the session history stack with the specified title (and, if provided, URL).
replaceState() - Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL.

